#LDPL version 4.4 'Friendly Falcarius'

using package ltb

data:

token is text
games is text list
urls is text map

procedure:

store "PASTE_TOKEN_HERE" in token

push "Eterspire" to games
push "Cebador" to games

store "https://wi.likebtn.com/w/i/?s=%7B%22h%22%3A%22play.expoeva.com%22%2C%22s%22%3A%226321b7ad6fd08b1313706291%22%2C%22i%22%3A%5B%22e3ce92f42af1%22%5D%7D" in urls:"Eterspire"
store "https://wi.likebtn.com/w/i/?s=%7B%22h%22%3A%22play.expoeva.com%22%2C%22s%22%3A%226321b7ad6fd08b1313706291%22%2C%22i%22%3A%5B%224c0d6e629c10%22%5D%7D" in urls:"Cebador"

tg bot init with token token

# This sub-procedure is called each time a new text message arrives.
# Captions in animation, audio, document, photo, video or voice are captured too.
sub ltb.onMessage
parameters:
    messageId is number     # id of the sent message
    chatId is number        # id of the chat where is was sent
    userData is text map    # user data from sender
    messageText is text     # content of the message
local data:
    auxNumber is number
    auxText is text
    auxList is text list
    request is text
    game is text
    msg is text
procedure:
    get index of "/votos" from messageText in auxNumber
    if auxNumber is not equal to 0 then
        return
    end if

    in msg join "üó≥Ô∏è *Votos* üó≥Ô∏è" crlf

    #get keys of urls in games
    for each game in games do
        in request join "curl '" urls:game "' --silent"
        execute request and store output in auxText
        split auxText by ",\"l\":" in auxList
        split auxList:1 by ",\"d\":" in auxList
        in msg join msg game ": " auxList:0 crlf
    repeat

    store "Markdown" in ltb.send.options:"format"
    tg bot send message msg to chatId
end sub

#######################
### NOT IMPLEMENTED ###
#######################

# This sub-procedure is called each time a user joins a chat.
sub ltb.onJoin
parameters:
    messageId is number     # id of the sent message announcing the user join
    chatId is number        # id of the chat the user joined
    userData is text map    # user data from the user who joined the chat
procedure:
    # Your code here
end sub

# This sub-procedure is called each time a user leaves a chat.
sub ltb.onDeparture
parameters:
    messageId is number     # id of the sent message announcing the user departure
    chatId is number        # id of the chat the user left
    userData is text map    # user data from the user who left the chat
procedure:
    # Your code here
end sub

# This sub-procedure is called each time a user press a button with callback data.
sub ltb.onCallbackQuery
parameters:
    chatId is number        # id of the chat from the message of the button that was pressed
    userData is text map    # user data from the user who pressed the button
    callbackData is text    # callback data from the pressed button
    answerText is text      # store a text here to display a notification to the user
    answerAlert is number   # store 1 here to show answerText as an alert instead of a notification at the top of the chat screen
procedure:
    # Your code here
end sub
